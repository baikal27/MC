<E>: Unit vector toware East R.A.
<N>: Unit vector toware North pole
<r>: Unit veoctor of star

<z >: Unit vector toward North pole
<x >: Unit vector toward South point on Equator
<z'>: Unit vector toward zenith
<z'> = cos(phi)<x> + sin(phi)<z>

<E'>: Unit vector toware East Azimuth 
<N'>: Unit vector toware zenith
<r>: Unit veoctor of star

H: -HA , HA is hour angle
dec: declination
A: -AZI, AZI is azimuh (increaing toward west from meridian)
h: altitude


<x'> = sin(phi)<x> - cos(phi)<z>
<y'> = <y>
<z'> = cos(phi)<x> + sin(phi)<z>

cos(h)cos(A) = sin(phi)cos(dec)cos(H) - cos(phi)sin(dec)
cos(h)sin(A) = cos(dec)sin(H)
sin(h)       = cos(phi)cos(dec)cos(H) + sin(phi)sin(dec)

<E> = <z> x <r> /cos(dec)
<N> = <r> x <E> 
    = <r> x (<z> x <r>)    /cos(dec)
    = [<z> - <r> <r>dot<z>]/cos(dec)
    = [<z> - sin(dec)<r>]  /cos(dec)

<z'> = cos(phi) <x> + sin(phi) <z>
<E'> = <z'> x <r> / cos(h)
<N'> = [<z'> - sin(h)<r>]/cos(h)

cos(dec)cos(h) <E> dot <E'> = (<z'>x<r>) dot (<z>x<r>)
             = <z> dot [<r)x(<z'>x<r>)]
             = <z> dot [<z'>(<r>dot<r>) - <r>(<r>dot<z'>)]
             = <z> dot [<z'> - <r>(<r>dot<z'>)]
             = <z>dot<z'> - <z>dot<r> <r>dot<z'>
             = cos(90-phi) - sin(dec)sin(h)
             = sin(phi) - sin(dec)sin(h)

cos(dec)cos(h) <E> dot <N'> = (<z'> - sin(h)<r>) dot (<z>x<r>) 
                            = <z'> dot (<z>x<r>) 
                            = <r> dot (<z>' x <z>)
                            = -cos(phi) <r> dot <y>
                            = -cos(phi)cos(dec)sin(H)
                            =  cos(phi)cos(dec)sin(HA)
==>
tan(PSI) = [cos(phi)cos(dec)sin(HA)]/[sin(phi) - sin(dec)sin(h)]
PSI is the angle between <N>' and <N>, it is positive if <N> is toward west from <N>'

//-------------------------------------------------------------------------------
{double last,ha, ra,dec;
        get_apradec(ra_2000,dec_2000,jd_ut1, &ra,&dec);
        last = jdtolast(jd_ut1,longi);
        ha   = last - ra;
        *alt = asin ( sin(lati)*sin(dec) + cos(lati)*cos(dec)*cos(ha) );
        *az  = atan2( cos(dec)*sin(ha),
                     -cos(lati)*sin(dec)+sin(lati)*cos(dec)*cos(ha) );
//      if(*az<0.0) *az = *az + TWOPI;

//      correct for refraction, if flag is not 0.
        if(flag != 0) refract(alt);

//      calculate the derotator angle
        *psi = atan2( cos(dec)*sin(ha)*cos(lati),
                      sin(lati)-sin(dec)*sin(*alt) );
}
//-------------------------------------------------------------------------------
void get_aposi(double ra_2000, double dec_2000, double jd_ut1, double longi,double lati, int flag,
              double *last, double *ap_ha, double *ap_dec, double *ap_alt, double *ap_az)
//-------------------------------------------------------------------------------
//   This function claculate apparent position (hour angle, declination, altitude
//   azimuth, local astronomical time from R.A. & Dec. given in J2000 coordinates
//   system. Note that it also corrects for atmospheric refraction.
//   It is useful to control a telescope with equatorial mount.
//   
//	Input variable
//	   real*8 ra_2000, dec_2000 : RA. and Dec. (radian) in J2000 coordinate system
//	   real*8 jd_ut1  : Julian date in UT1 scale
//	   longi, lati    : Longitude and Latitude in radian
//         flag           : flag for refraction correction. 
//                          if flag = 0, not correct for refraction 
//                          else         correct for refraction
//	Output variable
//	   last           : Local Apparent Sidereal time in radian
//	   ap_ha , ap_dec : apparent hour angle and dec. in radian
//	   ap_alt, ap_az  : Altitude and azimuth in radian.
//
//     Note that the output position is corrected for refraction,
//               azimuth is measured from south toward south,
//               hour angle is given between -180 deg. and 180 deg
//
//                Created  by Inwoo Han on Jun. 25, 1996
//                Modified by Inwoo Han on Aug. 22, 1997
//-------------------------------------------------------------------------------
{
 double ap_ra;

    *last  = jdtolast(jd_ut1,longi);
    if(*last<0.0) *last = *last + TWOPI;

//  calculate apparent ra and dec
    get_apradec(ra_2000,dec_2000,jd_ut1, &ap_ra, ap_dec);

//  claculate altitude and azimuth
    equtohor(ap_ra,*ap_dec,*last,lati,ap_az,ap_alt);

//  correct for refraction
    if(flag != 0)
      {
       if(rad_to_deg(*ap_alt) > -5.0)  refract(ap_alt);
       hortoequ(*ap_az,*ap_alt,*last,lati,&ap_ra,ap_dec);
      }

//  calculate and adjust the range of the apparent hour angle
	*ap_ha = funha(ap_ra,*last);
	if(*ap_ha > PI314) *ap_ha = *ap_ha - TWOPI;
	if(*ap_ha <-PI314) *ap_ha = *ap_ha + TWOPI;
}
//-------------------------------------------------------------------------------

