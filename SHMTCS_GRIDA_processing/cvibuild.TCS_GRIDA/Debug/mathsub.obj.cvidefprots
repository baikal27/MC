[hms_to_rad]
Class="Function"
Prototype="void hms_to_rad(struct H_M_S *hms);"

[dms_to_rad]
Class="Function"
Prototype="void dms_to_rad(struct D_M_S *dms);"

[rad_to_hms]
Class="Function"
Prototype="void rad_to_hms(struct H_M_S *hms);"

[rad_to_dms]
Class="Function"
Prototype="void rad_to_dms(struct D_M_S *dms);"

[rad_to_deg]
Class="Function"
Prototype="double rad_to_deg(double radian);"

[deg_to_rad]
Class="Function"
Prototype="double deg_to_rad(double degree);"

[stor]
Class="Function"
Prototype="void stor(double ra, double dec, double *x);"

[rtos]
Class="Function"
Prototype="void rtos(double *x, double *ra, double *dec);"

[rotx]
Class="Function"
Prototype="void rotx(double theta, double *X, double *XP);"

[roty]
Class="Function"
Prototype="void roty(double theta, double *X, double *XP);"

[rotz]
Class="Function"
Prototype="void rotz(double theta, double *X, double *XP);"

[dproduct]
Class="Function"
Prototype="double dproduct(double *a, double *b);"

[cproduct]
Class="Function"
Prototype="void cproduct(double *a, double *b, double *c);"

[dotproduct]
Class="Function"
Prototype="double dotproduct(double *a, double *b, int ndata);"

[vectsub]
Class="Function"
Prototype="void vectsub(const double *a, const double *b, double *c);"

[make_unit]
Class="Function"
Prototype="void make_unit(double *x);"

[funr]
Class="Function"
Prototype="double funr(double *q);"

[clsq]
Class="Function"
Prototype="int clsq(double *a, double *y, double *q, double *aty, int ndmax, int nd, int npmax, int np, double *par, double *r, double *use);"

[clsq_adj]
Class="Function"
Prototype="int clsq_adj(double lambda, double *a, double *y, double *q, double *aty, int ndmax, int nd, int npmax, int np, double *par, double *r, double *use);"

[csqtinv]
Class="Function"
Prototype="int csqtinv(double *q, double *dum, int nc, int n);"

[linear_fit]
Class="Function"
Prototype="int linear_fit(double *y, double *x, int ndata, double *slope, double *offset, double *res, double *use);"

[polint]
Class="Function"
Prototype="int polint(double *XA, double *YA, int N, double X, double *Y, double *DY);"

[funroot]
Class="Function"
Prototype="double funroot(double f0, double x1, double x2, double facc);"

[find_max]
Class="Function"
Prototype="double find_max(double *x, int ndata);"

[find_min]
Class="Function"
Prototype="double find_min(double *x, int ndata);"

[find_mean]
Class="Function"
Prototype="double find_mean(double *x, int ndata);"

[find_mean_sigma]
Class="Function"
Prototype="double find_mean_sigma(double *x, int ndata, double *mean);"

[modpi2]
Class="Function"
Prototype="double modpi2(double a);"

[modpi]
Class="Function"
Prototype="double modpi(double a);"

[sort_double_old]
Class="Function"
Prototype="int sort_double_old(int ndata, double *yinp, int *indx);"

[sort_double]
Class="Function"
Prototype="int sort_double(int ndata, double *yinpp, int *indxp);"

[intsort]
Class="Function"
Prototype="int intsort(int n, int *arrin, int *indx);"

[cubic_spline_interpolate]
Class="Function"
Prototype="int cubic_spline_interpolate(int n1, double *y1, int df, double *y2);"

[remove_outlier]
Class="Function"
Prototype="int remove_outlier(double *x, int ndata, double range, double *me, double *si, int *nn);"

[remove_trend]
Class="Function"
Prototype="double remove_trend(double *epoch, double *rvd, double *para, int ndata, int npara);"

[calc_ccf]
Class="Function"
Prototype="int calc_ccf(double *template, int ntempl, double *comp, int ncomp, double *ccf, int s1, int s2);"

[convolve_old]
Class="Function"
Prototype="int convolve_old(double *y, int ny, double *profile, int np, double *y_conv);"

[convolve]
Class="Function"
Prototype="int convolve(double *y, int ny, double *profile, int np, double *y_conv);"

